# -*- coding: utf-8 -*-
"""indexer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1theAmOHyhtS3gfcninfjDiriU9wdQodj
"""

from linkedlist import LinkedList
from collections import OrderedDict


class Indexer:
    def __init__(self):
        """ Add more attributes if needed"""
        self.inverted_index = OrderedDict({})

    def get_index(self):
        """ Function to get the index.
            Already implemented."""
        return self.inverted_index

    def generate_inverted_index(self, doc_id, tokenized_document):
        """ This function adds each tokenized document to the index. This in turn uses the function add_to_index
            Already implemented."""
        for t in tokenized_document:
            self.add_to_index(t, doc_id)

    def add_to_index(self, term_, doc_id_):
        """ This function adds each term & document id to the index.
            If a term is not present in the index, then add the term to the index & initialize a new postings list (linked list).
            If a term is present, then add the document to the appropriate position in the posstings list of the term.
            To be implemented."""
        # raise NotImplementedError

        if term_ not in self.inverted_index:
          self.inverted_index[term_] = LinkedList()
          self.inverted_index[term_].insert_at_end(doc_id_)
        elif doc_id_ not in LinkedList.traverse_list(self.inverted_index[term_]):
          self.inverted_index[term_].insert_at_end(doc_id_)

    def sort_terms(self):
        """ Sorting the index by terms.
            Already implemented."""
        index = OrderedDict({})
        for k in sorted(self.inverted_index.keys()):
            index[k] = self.inverted_index[k]
        self.inverted_index = index

    def add_skip_connections(self):
        """ For each postings list in the index, add skip pointers.
            To be implemented."""
        # raise NotImplementedError
        for value in self.inverted_index.values():
          LinkedList.add_skip_connections(value)


    # def cal_tf(self):
    #   for key,value in self.inverted_index:
    #     print("hello")
    #   return

    def calculate_tf_idf(self,tfdict):
        """ Calculate tf-idf score for each document in the postings lists of the index.
            To be implemented."""
        # raise NotImplementedError
        # print("tfdict")
        # print(self.inverted_index)
        for key in self.inverted_index.keys():
          # print("hello")
          # print("key")
          LinkedList.calc_tf(self.inverted_index[key],tfdict[key])
          # print(LinkedList.traverse_list())
        # print("Hello")

